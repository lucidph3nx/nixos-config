#!/usr/bin/env python

import json
import subprocess
import re
import os
import requests

def get_pipewire_audio_info(host):
    hostname = host.get("name", "unknown")
    """Fetch current audio output sync information from PipeWire."""
    try:
        # Run the pw-dump command to get PipeWire info
        result = subprocess.run(["pw-dump"], capture_output=True, text=True, check=True)
        data = json.loads(result.stdout)

        # Find the default audio sink node from metadata
        default_sink_name = None
        for node in data:
            if (
                node.get("type") == "PipeWire:Interface:Metadata"
                and node.get("props", {}).get("metadata.name") == "default"
            ):
                for meta in node.get("metadata", []):
                    if meta.get("key") == "default.audio.sink":
                        default_sink_name = meta.get("value", {}).get("name")
                        break
        default_source_name = None
        for node in data:
            if (
                node.get("type") == "PipeWire:Interface:Metadata"
                and node.get("props", {}).get("metadata.name") == "default"
            ):
                for meta in node.get("metadata", []):
                    if meta.get("key") == "default.audio.source":
                        default_source_name = meta.get("value", {}).get("name")
                        break

        # Parse to find default sink
        default_sink_info = {}
        for node in data:
            info_props = node.get("info", {}).get("props", {})
            if (
                node.get("type") == "PipeWire:Interface:Node"
                and node.get("info", {}).get("props", {}).get("node.name")
                == default_sink_name
            ):
                default_sink_info = {
                    "id": node.get("id"),
                    "name": info_props.get("node.description", "unknown"),
                }
                # use wpctl to get the volume
                volume = subprocess.run(
                    ["wpctl", "get-volume", str(node.get("id"))],
                    capture_output=True,
                    text=True,
                    check=True,
                )
                # parse "Volume: 0.35" to get the volume percentage
                volume_percent = float(volume.stdout.split(":")[1].strip()) * 100
                default_sink_info["volume"] = f"{volume_percent:.0f}%"

        # Parse to find default source
        default_source_info = {}
        for node in data:
            info_props = node.get("info", {}).get("props", {})
            if (
                node.get("type") == "PipeWire:Interface:Node"
                and node.get("info", {}).get("props", {}).get("node.name")
                == default_source_name
            ):
                default_source_info = {
                    "id": node.get("id"),
                    "name": info_props.get("node.description", "unknown"),
                }

                # use wpctl to get the volume
                volume = subprocess.run(
                    ["wpctl", "get-volume", str(node.get("id"))],
                    capture_output=True,
                    text=True,
                    check=True,
                )
                # parse "Volume: 0.35" to get the volume percentage
                volume_percent = float(volume.stdout.split(":")[1].strip()) * 100
                default_source_info["volume"] = f"{volume_percent:.0f}%"
        # return sink info and source info as a json object
        return {
            "default_sink": default_sink_info,
            "default_source": default_source_info,
        }

    except subprocess.CalledProcessError as e:
        print(f"Error calling pw-dump: {e}")
        return []
    except json.JSONDecodeError:
        print("Error decoding JSON from pw-dump.")
        return []


def get_network_status():
    """Fetch current network status using NetworkManager and return only the default network."""
    try:
        # Run nmcli command to get the active connections with NAME, DEVICE, STATE, and TYPE
        result = subprocess.run(
            [
                "nmcli",
                "-t",
                "-f",
                "NAME,DEVICE,STATE,TYPE",
                "connection",
                "show",
                "--active",
            ],
            capture_output=True,
            text=True,
            check=True,
        )

        # Parse the result to get details about the active network
        connections = result.stdout.strip().splitlines()

        for connection in connections:
            fields = connection.split(":")
            name, device, state, conn_type = fields

            # Map the conn_type to simplified type
            if conn_type == "802-3-ethernet":
                conn_type = "ethernet"
            elif conn_type == "802-11-wireless":
                conn_type = "wifi"

            # Check if this is the default network
            if state == "activated":
                # Run nmcli again to get the IP address for the default network device
                ip_result = subprocess.run(
                    ["nmcli", "-g", "IP4.ADDRESS", "device", "show", device],
                    capture_output=True,
                    text=True,
                    check=True,
                )
                ip = ip_result.stdout.strip()

                # Return network info with simplified type
                return {"name": name, "device": device, "type": conn_type, "ip": ip}

        # If no default network found
        return {}

    except subprocess.CalledProcessError as e:
        print(f"Error calling nmcli: {e}")
        return {}

    except subprocess.CalledProcessError as e:
        print(f"Error calling nmcli: {e}")
        return {}


def get_mouse_battery_status():
    try:
        # Run the polychromatic-cli command to get mouse info
        result = subprocess.run(
            ["polychromatic-cli", "-d", "mouse", "-k"],
            capture_output=True,
            text=True,
            check=True,
        )

        # Extract battery information
        battery_info_line = None
        for line in result.stdout.splitlines():
            if "Battery" in line:
                battery_info_line = line
                break

        if battery_info_line:
            # Match battery percentage and charging status using regex
            match = re.search(r"(\d+%)\s*(\((charging)\))?", battery_info_line)
            if match:
                battery_percentage = match.group(1)
                charging_status = bool(
                    match.group(3)
                )  # True if 'charging' is present, otherwise False

                # Determine if the battery is low (less than 20%)
                battery_value = int(battery_percentage.strip("%"))
                battery_low = battery_value < 20

                # Construct the status string
                status = (
                    f"{battery_percentage} (charging)"
                    if charging_status
                    else battery_percentage
                )

                return {
                    "battery_percentage": battery_percentage,
                    "charging": charging_status,
                    "battery_low": battery_low,
                    "status": status,
                }
            else:
                return {
                    "battery": "unknown",
                    "charging": False,
                    "battery_low": False,
                    "status": "unknown",
                }
        else:
            return {
                "battery": "unknown",
                "charging": False,
                "battery_low": False,
                "status": "unknown",
            }

    except subprocess.CalledProcessError as e:
        return {
            "battery": "unknown",
            "charging": False,
            "battery_low": False,
            "status": "unknown",
        }


def get_host_info():
    try:
        # Run the hostnamectl command to get host info
        result = subprocess.run(
            ["hostnamectl"], capture_output=True, text=True, check=True
        )

        # Initialize a dictionary to store the host info
        host_info = {
            "name": None,
            "kernel": None,
            "architecture": None,
            "operating_system": None,
        }

        # Parse each line to extract relevant information
        for line in result.stdout.splitlines():
            if "Static hostname" in line:
                host_info["name"] = line.split(":")[1].strip()
            elif "Kernel" in line:
                host_info["kernel"] = line.split(":")[1].strip()
            elif "Architecture" in line:
                host_info["architecture"] = line.split(":")[1].strip()
            elif "Operating System" in line:
                host_info["operating_system"] = line.split(":")[1].strip()

        # Return the host information
        return host_info

    except subprocess.CalledProcessError as e:
        print(f"Error calling hostnamectl: {e}")
        return {
            "name": "unknown",
            "kernel": "unknown",
            "architecture": "unknown",
            "operating_system": "unknown",
        }


def get_battery_info():
    battery_path = "/sys/class/power_supply/BAT0"

    # Check if battery exists
    if not os.path.exists(battery_path):
        return {"capacity": 0, "status": "No Battery", "low": False}

    # Read the capacity and status from the sysfs interface
    try:
        with open(os.path.join(battery_path, "capacity"), "r") as f:
            capacity = int(f.read().strip())
        with open(os.path.join(battery_path, "status"), "r") as f:
            status = f.read().strip().lower()

        # Determine if the battery is low
        low = capacity < 20

        # Return the data as JSON
        battery_info = {"capacity": capacity, "status": status, "low": low}
        return battery_info

    except FileNotFoundError as e:
        return json.dumps({"error": f"File not found: {str(e)}"})
    except ValueError as e:
        return json.dumps({"error": f"Invalid value: {str(e)}"})

def get_power_profile():
    # use powerprofilesctl to get the current power profile
    try:
        result = subprocess.run(
            ["powerprofilesctl", "get"],
            capture_output=True,
            text=True,
            check=True,
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error calling powerprofilesctl: {e}")
        return "unknown"

def get_idle_inhibit_status():
    # use powerprofilesctl to get the current idle inhibit status
    try:
        result = subprocess.run(
            ["cli.system.inhibitIdle", "status"],
            capture_output=True,
            text=True,
            check=True,
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error calling cli.system.inhibitIdle: {e}")
        return "unknown"

def get_notifications():
    # use swaync-client to get the current notifications
    try:
        result = subprocess.run(
            ["swaync-client", "--count"],
            capture_output=True,
            text=True,
            check=True,
        )
        # return count and has_notifications as a json object
        return {
            "count": int(result.stdout.strip()),
            "has_notifications": bool(int(result.stdout.strip())),
        }
    except subprocess.CalledProcessError as e:
        print(f"Error calling swaync-client: {e}")
        return "unknown"

def get_office_temperature():
    # get the home-assistant api key from env $HASS_API_KEY
    HASS_API_KEY = os.getenv("HASS_API_KEY")
    SECRET_DOMAIN = os.getenv("SECRET_DOMAIN")

    url = f"https://home-assistant.{SECRET_DOMAIN}/api/states/sensor.office_sensor_temperature"
    headers = {
        "Authorization": f"Bearer {HASS_API_KEY}",
        "Content-Type": "application/json"
    }

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = json.loads(response.text)
        temperature = data['attributes']['temperature']
        unit = data['attributes']['unit_of_measurement']
        return (f" {temperature}{unit}")
    else:
        print(f"Error getting office temperature: {response.status_code}")
        return "unknown"

def get_office_humidity():
    # get the home-assistant api key from env $HASS_API_KEY
    HASS_API_KEY = os.getenv("HASS_API_KEY")
    SECRET_DOMAIN = os.getenv("SECRET_DOMAIN")

    url = f"https://home-assistant.{SECRET_DOMAIN}/api/states/sensor.office_sensor_humidity"
    headers = {
        "Authorization": f"Bearer {HASS_API_KEY}",
        "Content-Type": "application/json"
    }

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = json.loads(response.text)
        temperature = data['attributes']['humidity']
        unit = data['attributes']['unit_of_measurement']
        return (f" {temperature}{unit}")
    else:
        print(f"Error getting office humidity: {response.status_code}")
        return "unknown"

def mpd_now_playing():
    """Fetches and parses MPC information to generate a friendly now playing message.

    Returns:
        str: The formatted now playing message.
    """

    # Fetch MPC output
    mpc_json = subprocess.run(['mpc', '-f', "'{\"name\":\"%name%\", \"artist\":\"%artist%\", \"album\":\"%album%\", \"albumartist\":\"%albumartist%\", \"comment\":\"%comment%\", \"composer\":\"%composer%\", \"date\":\"%date%\", \"originaldate\":\"%originaldate%\", \"disc\":\"%disc%\", \"genre\":\"%genre%\", \"performer\":\"%performer%\", \"title\":\"%title%\", \"track\":\"%track%\", \"time\":\"%time%\", \"file\":\"%file%\", \"position\":\"%position%\", \"id\":\"%id%\", \"prio\":\"%prio%\", \"mtime\":\"%mtime%\", \"mdate\":\"%mdate%\", \"audioformat\":\"%audioformat%\"}'"], capture_output=True, text=True).stdout.strip().splitlines()[0]
    mpc_status = subprocess.run(['mpc', 'status'], capture_output=True, text=True).stdout.strip().splitlines()
    mpc_json = mpc_json.replace("'", '')

    # Parse JSON metadata
    metadata = json.loads(mpc_json)
    artist = metadata.get('artist', '')
    title = metadata.get('title', '')

    # Determine display artist
    display_artist = artist if artist else metadata.get('name', '')

    # Parse playback status
    playing_status = re.search(r'\[(.*)\]', mpc_status[1]).group(1)
    elapsed_time, total_time = re.findall(r'\d+:\d+', mpc_status[1])

    # Set play icon based on status
    play_icon = {
        'playing': '',
        'paused': '',
    }.get(playing_status, '')  # Default for stopped

    # Format time information
    time_info = f' ({elapsed_time}/{total_time})' if total_time != '0:00' else ''

    # Format the now playing message
    now_playing = f"{play_icon} {display_artist} - {title}{time_info} 󰝚"
    now_playing = now_playing.replace('&', '&amp;')

    return {"now_playing": now_playing}

def main():
    # Produce a simplified JSON output
    host_info = get_host_info()
    output = {
        "host": host_info,
        "audio": get_pipewire_audio_info(host_info),
        "network": get_network_status(),
        "power": {
            "mouse": get_mouse_battery_status(),
            "battery": get_battery_info(),
            "profile": get_power_profile(),
            "idle_inhibit": get_idle_inhibit_status(),
        },
        "notifications": get_notifications(),
        "environment": {
            "office": {
                "temperature": get_office_temperature(),
                "humidity": get_office_humidity(),
            }
        },
        "mpd": mpd_now_playing(),
    }

    print(json.dumps(output, indent=2, ensure_ascii=False))

if __name__ == "__main__":
    main()
